apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8snodefaultnamespace
spec:
  crd:
    spec:
      names:
        kind: K8sNoDefaultNamespace
        listKind: K8sK8sNoDefaultNamespaceList
        plural: k8snodefaultnamespaces
        singular: k8snodefaultnamespace
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties: {}
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: | #INLINE("library/nodefaultnamespace/src.rego")
        package k8snodefaultnamespace
        
        # has_field returns whether an object has a field
        has_field(object, field) {
        	object[field]
        }
        
        # False is a tricky special case, as false responses would create an undefined document unless
        # they are explicitly tested for
        has_field(object, field) {
        	object[field] == false
        }
        
        has_field(object, field) = false {
        	not object[field]
        	not object[field] == false
        }
        
        get_default(object, field, _default) = output {
        	has_field(object, field)
        	output = object[field]
        }
        
        get_default(object, field, _default) = output {
        	has_field(object, field) == false
        	output = _default
        }
        
        violation[{"msg": msg}] {
        	namespace := get_default(input.review.object.metadata, "namespace", "")
        	namespace == "default"
        	msg := "no resource allowed in default namespace"
        }
        #ENDINLINE

